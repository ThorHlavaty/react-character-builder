{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/thorhlavaty/DigitalCrafts/react-character-builder/client/src/components/CharacterSheet/CharacterSheet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport CharacterStats from './CharacterStats';\nexport default function CharacterSheet() {\n  _s();\n\n  const [character, setCharacter] = useState({});\n  const [statArray, setStatArray] = useState([]);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    fetch(`/api/v1/characters/${id}`).then(res => res.json()).then(data => {\n      setCharacter(data);\n      let newStatArray = [...statArray];\n      newStatArray.concat(data.str);\n      setStatArray([data.str, data.dex, data.con, data.wis, data.int, data.cha]); // setStatArray([...statArray].concat(data.str, character.dex, character.con, character.wis, character.int, character.cha))\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [character.name, \" \", character.class, \" \", character.race, /*#__PURE__*/_jsxDEV(Grid, {\n      columns: 8,\n      children: /*#__PURE__*/_jsxDEV(CharacterStats, {\n        stats: statArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CharacterSheet, \"JVlY7vY5A/VQ+RAgPWl2hoQQdXw=\", false, function () {\n  return [useParams];\n});\n\n_c = CharacterSheet;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharacterSheet\");","map":{"version":3,"sources":["/Users/thorhlavaty/DigitalCrafts/react-character-builder/client/src/components/CharacterSheet/CharacterSheet.js"],"names":["React","useEffect","useState","useParams","Grid","CharacterStats","CharacterSheet","character","setCharacter","statArray","setStatArray","id","fetch","then","res","json","data","newStatArray","concat","str","dex","con","wis","int","cha","name","class","race"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,SAASC,cAAT,GAA0B;AAAA;;AACvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA6BN,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACE,QAAM;AAAES,IAAAA;AAAF,MAASR,SAAS,EAAxB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,KAAK,CAAE,sBAAqBD,EAAG,EAA1B,CAAL,CACCE,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAI;AACVR,MAAAA,YAAY,CAACQ,IAAD,CAAZ;AACA,UAAIC,YAAY,GAAG,CAAC,GAAGR,SAAJ,CAAnB;AACAQ,MAAAA,YAAY,CAACC,MAAb,CAAoBF,IAAI,CAACG,GAAzB;AACAT,MAAAA,YAAY,CAAC,CAACM,IAAI,CAACG,GAAN,EAAWH,IAAI,CAACI,GAAhB,EAAqBJ,IAAI,CAACK,GAA1B,EAA+BL,IAAI,CAACM,GAApC,EAAyCN,IAAI,CAACO,GAA9C,EAAmDP,IAAI,CAACQ,GAAxD,CAAD,CAAZ,CAJU,CAKV;AACH,KARD;AASH,GAVQ,EAUN,CAACb,EAAD,CAVM,CAAT;AAYF,sBACE;AAAA,eACGJ,SAAS,CAACkB,IADb,OACoBlB,SAAS,CAACmB,KAD9B,OACsCnB,SAAS,CAACoB,IADhD,eAEE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAE,CAAf;AAAA,6BACE,QAAC,cAAD;AAAgB,QAAA,KAAK,EAAElB;AAAvB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAzBuBH,c;UAGLH,S;;;KAHKG,c","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport CharacterStats from './CharacterStats';\n\nexport default function CharacterSheet() {\n  const [character, setCharacter ] = useState({});\n  const [statArray, setStatArray] = useState([])\n    const { id } = useParams();\n    \n    useEffect(() => {\n        fetch(`/api/v1/characters/${id}`)\n        .then(res => res.json())\n        .then(data => {\n            setCharacter(data);\n            let newStatArray = [...statArray]\n            newStatArray.concat(data.str)\n            setStatArray([data.str, data.dex, data.con, data.wis, data.int, data.cha])\n            // setStatArray([...statArray].concat(data.str, character.dex, character.con, character.wis, character.int, character.cha))\n        })    \n    }, [id])\n  \n  return (\n    <div>\n      {character.name} {character.class} {character.race}\n      <Grid columns={8}>\n        <CharacterStats stats={statArray} />\n      </Grid>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}