{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/thorhlavaty/DigitalCrafts/react-character-builder/src/components/FinishingTouches/Attributes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport { setStatSubmitted } from '../../redux/actions';\nimport Attribute from './Attribute';\nexport default function Attributes() {\n  _s();\n\n  const [attributeArray] = useState(['Strength', 'Dexterity', 'Constitution', 'Wisdom', 'Intelligence', 'Charisma']);\n  const points = useSelector(state => state.pointCalculator);\n  const name = useSelector(state => state.name);\n  const dispatch = useDispatch();\n  let usedPoints = 0; //All this does is allow us to access the names of the pointCalculator as an array, so we can easily loop over it.\n  //That makes it easy to check how many points the user has used.\n\n  Object.keys(points).forEach(name => {\n    usedPoints += points[name][0];\n  });\n\n  function submitHandler() {\n    if (name === '') {\n      alert('You must choose a name!');\n    } else if (usedPoints !== 27) {\n      alert('You must spend all points!');\n    } else {\n      if (window.confirm(\"Are you sure you wish to confirm this Character?\")) {\n        dispatch(setStatSubmitted(true));\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: \"Your Character's Attrubutes:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"You have \", 27 - usedPoints, \" points left.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      columns: 3,\n      style: {\n        marginTop: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: attributeArray.map((attribute, index) => {\n          return /*#__PURE__*/_jsxDEV(Attribute, {\n            attribute: attribute\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 24\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => submitHandler(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Attributes, \"vWsvctrmLOjQWSaxRxhXVaDHZzE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Attributes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Attributes\");","map":{"version":3,"sources":["/Users/thorhlavaty/DigitalCrafts/react-character-builder/src/components/FinishingTouches/Attributes.js"],"names":["React","useState","useDispatch","useSelector","Button","Grid","Header","setStatSubmitted","Attribute","Attributes","attributeArray","points","state","pointCalculator","name","dispatch","usedPoints","Object","keys","forEach","submitHandler","alert","window","confirm","marginTop","map","attribute","index"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,MAAvB,QAAqC,mBAArC;AACA,SAAUC,gBAAV,QAAkC,qBAAlC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACjC,QAAM,CAACC,cAAD,IAAmBT,QAAQ,CAAC,CAAC,UAAD,EAAa,WAAb,EAA0B,cAA1B,EAA0C,QAA1C,EAAoD,cAApD,EAAoE,UAApE,CAAD,CAAjC;AACA,QAAMU,MAAM,GAAGR,WAAW,CAACS,KAAK,IAAGA,KAAK,CAACC,eAAf,CAA1B;AACA,QAAMC,IAAI,GAAGX,WAAW,CAACS,KAAK,IAAGA,KAAK,CAACE,IAAf,CAAxB;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,MAAIc,UAAU,GAAG,CAAjB,CALiC,CAMjC;AACA;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,OAApB,CAA4BL,IAAI,IAAI;AAACE,IAAAA,UAAU,IAAIL,MAAM,CAACG,IAAD,CAAN,CAAa,CAAb,CAAd;AAA8B,GAAnE;;AAKA,WAASM,aAAT,GAAwB;AACtB,QAAIN,IAAI,KAAK,EAAb,EAAiB;AACfO,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACD,KAFD,MAEO,IAAIL,UAAU,KAAK,EAAnB,EAAsB;AAC3BK,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACD,KAFM,MAEA;AACL,UAAGC,MAAM,CAACC,OAAP,CAAe,kDAAf,CAAH,EAAsE;AACpER,QAAAA,QAAQ,CAACR,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AAAiC;AACpC;AACN;;AAEG,sBACI;AAAA,4BACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAIA;AAAA,8BACY,KAAKS,UADjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJA,eAOA,QAAC,IAAD;AAAM,MAAA,OAAO,EAAE,CAAf;AAAkB,MAAA,KAAK,EAAE;AAACQ,QAAAA,SAAS,EAAC;AAAX,OAAzB;AAAA,6BACE,QAAC,IAAD,CAAM,GAAN;AAAA,kBACGd,cAAc,CAACe,GAAf,CAAmB,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACtC,8BAAO,QAAC,SAAD;AAAuB,YAAA,SAAS,EAAED;AAAlC,aAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPA,eAcA,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAMP,aAAa,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdA;AAAA,kBADJ;AAoBH;;GA5CuBX,U;UAELN,W,EACFA,W,EACID,W;;;KAJGO,U","sourcesContent":["import React, {  useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Grid, Header } from 'semantic-ui-react'\nimport {  setStatSubmitted } from '../../redux/actions'\nimport Attribute from './Attribute'\n\nexport default function Attributes() {\n    const [attributeArray] = useState(['Strength', 'Dexterity', 'Constitution', 'Wisdom', 'Intelligence', 'Charisma'])\n    const points = useSelector(state=> state.pointCalculator)\n    const name = useSelector(state=> state.name)\n    const dispatch = useDispatch()\n    let usedPoints = 0\n    //All this does is allow us to access the names of the pointCalculator as an array, so we can easily loop over it.\n    //That makes it easy to check how many points the user has used.\n    Object.keys(points).forEach(name => {usedPoints += points[name][0]})\n\n    \n    \n    \n    function submitHandler(){\n      if (name === '') {\n        alert('You must choose a name!')\n      } else if (usedPoints !== 27){\n        alert('You must spend all points!')\n      } else {\n        if(window.confirm(\"Are you sure you wish to confirm this Character?\")){\n          dispatch(setStatSubmitted(true))}\n      }\n}\n\n    return (\n        <>\n        <Header>\n            Your Character's Attrubutes:\n        </Header>\n        <div>\n          You have {27 - usedPoints} points left.\n        </div>\n        <Grid columns={3} style={{marginTop:\"10px\"}}>\n          <Grid.Row>\n            {attributeArray.map((attribute, index) => {\n                return <Attribute key={index} attribute={attribute} />\n            })}\n          </Grid.Row>\n        </Grid>\n        <Button onClick={() => submitHandler()}>\n          Submit\n        </Button>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}